KP		KI		KD		SPEED		
.8		.0001		.5		155		
.1				.3		170		
.5				.3		155			
.2		.00015		.4		155	SOSO
.3		.00015		.5		155	stable but not smooth

.3		.00015		.5		200
.2 		.00015		.5		200	STABLE BUT NOT SMOOTH
.15		.00015		.25		140	GOODS battery at the back or front
.1		.00015		.25		120  	very good
0.08		.00015		.25		110	SOSO
0.1		.00015		.2		110 	CURRENT USE

.175		.00015		.3		145	NEW STABLE NOW CENTERED AT GOAL=2900 not 3500 anymore. array size is 7 but last index contains nothing

-----
.175		.00015		.3		145	soso. smooth but lacks sharp curves

.5		.00015		.425		145	can turn but, still needs improvement
.5		.00015		.475		145	stable :>
.525		.00015		.475		145	more stable :>
.525		.00015		.575		145	most stable but cannot take sharp turns

.525		.00015		.575		145	most stable with case handling for mini sharp turns
.52		.00015		.575		145	moster stable not so osci 




#include <QTRSensors.h>
#include <SparkFun_TB6612.h>

// QTR 8A pin assignments
//#define SENSOR8 A7
#define SENSOR7 A6
#define SENSOR6 A5
#define SENSOR5 A4
#define SENSOR4 A3
#define SENSOR3 A2
#define SENSOR2 A1
//#define SENSOR1 A0
#define LED_CTRL 6  

// TB6612FNG pin assignments
#define PWMA 3
#define PWMB 11
#define AIN2 7
#define AIN1 8
#define BIN1 9
#define BIN2 10

// Motor setup

Motor leftMotor = Motor(AIN1, AIN2, PWMA, 1, 255);
Motor rightMotor = Motor(BIN2, BIN1, PWMB, 1, 255);

// Calibration variables
unsigned long calibrationStartTime = 0; 
const int calibrationDuration = 5000;
const int ledPin = LED_BUILTIN;
int ledState = LOW;
bool calibrationPeriod = false;
int threshold = 0;

// Global sensor arrays
const uint8_t sensorArray[7] = { SENSOR7,  SENSOR6,  SENSOR5, SENSOR4, SENSOR3, SENSOR2, };
int sensorValues[7];

// Ambot Variables
QTRSensors qtr;
int SensorCount = 7;
int position;
float Kp = 0.1;
float Ki = 0.00015; 
float Kd = 0.2; //PANG DLI OVERCORRECT
int P, D, I, previousError, PIDvalue, error;
int lsp, rsp;
int tempPosition;
int centerPosition= 3500;
int minSpeed = -110;
int maxSpeed = 110;
int baseSpeed = 110;

void setup() {
  Serial.begin(9600);

  qtr.setSensorPins(sensorArray, SensorCount);

  digitalWrite(LED_CTRL, HIGH);
  delay(5);
  calibrateSensors();
}

void loop() {
  readSensors(sensorValues);

  position = qtr.readLineBlack(sensorValues);
  error = centerPosition - position;

  P = error;
  I = constrain(I + error, minSpeed, maxSpeed);
  D = error - previousError;
  previousError = error;

  int motorSpeed = (Kp * P) + (Ki * I) + (Kd * D);

  baseSpeed = 110 + 20*sin(2*M_PI*10*millis()/1000);

  int leftSpeed = constrain((baseSpeed - motorSpeed), minSpeed, maxSpeed);
  int rightSpeed = constrain((baseSpeed + motorSpeed), minSpeed, maxSpeed);

  // Serial.print("\t");
  // Serial.print("LEFT: ");
  // Serial.print(leftSpeed);

  // Serial.print("\t");
  // Serial.print("RIGHT: ");
  // Serial.print(rightSpeed);

  // Serial.println();


  leftMotor.drive(leftSpeed);
  rightMotor.drive(rightSpeed);

  displayReadings(sensorValues, position, error);
}

//======================================vvvCALIBRATIONS FUNCTIONSvvv======================================//
void calibrateSensors() {
  if (!calibrationPeriod) {
    stopMotors();

    int arrayThreshold[7] = { SENSOR7,  SENSOR6,  SENSOR5, SENSOR4, SENSOR3, SENSOR2};
    int indexThreshold = 0;
    
    for (int i = 0 ; i < 7 ; i ++) {
      if (arrayThreshold[i] < arrayThreshold[indexThreshold]) 
        indexThreshold = i;
    }

    threshold = arrayThreshold[indexThreshold] + 200;
  }
  
  blinkLED();

  delay(3000);

  blinkLED();
  
}

void blinkLED() {
  for (int i = 0; i < 3; i++) {
    digitalWrite(ledPin, HIGH);   
    delay(500);                  
    digitalWrite(ledPin, LOW);    
    delay(500);                   
  }
}
//======================================^^^CALIBRATIONS FUNCTIONS^^^======================================//

//======================================vvvSENSOR FUNCTIONSvvv======================================//
void readSensors (int* sensorVal) {
  for (int i=0 ; i<8 ; i++) {
    sensorVal[i] = analogRead(sensorArray[i]);
  }
}

void displayReadings (int* sensorReadings, int position, int error) {
  //int val_8 = sensorReadings[0];  
  int val_7 = sensorReadings[1];          
  int val_6 = sensorReadings[2];    
  int val_5 = sensorReadings[3];       
  int val_4 = sensorReadings[4];         
  int val_3 = sensorReadings[5];      
  int val_2 = sensorReadings[6];       
  //int val_1 = sensorReadings[7];

  Serial.print("\t");
  Serial.print("8: ");
  //Serial.print(val_8);
  Serial.print("\t");
  Serial.print("7: ");
  Serial.print(val_7);
  Serial.print("\t");
  Serial.print("6: ");
  Serial.print(val_6);
  Serial.print("\t");
  Serial.print("5: ");
  Serial.print(val_5);
  Serial.print("\t");
  Serial.print("4: ");
  Serial.print(val_4);
  Serial.print("\t");
  Serial.print("3: ");
  Serial.print(val_3);
  Serial.print("\t");
  Serial.print("2: ");
  Serial.print(val_2);
  Serial.print("\t");
  Serial.print("1: ");
  //Serial.print(val_1);
  Serial.print("\t");
  Serial.print("POS: ");
  Serial.print(position);
  Serial.print("\t");
  Serial.print("ERR: ");
  Serial.print(error);

  Serial.println();
}
//======================================^^^SENSOR FUNCTIONS^^^======================================//

//======================================vvvMOTOR FUNCTIONSvvv======================================//
void stopMotors() {
  leftMotor.drive(0);
  rightMotor.drive(0);
}
//======================================^^^MOTOR FUNCTIONS^^^======================================//




		